package com.kajal.videoplayer

import android.annotation.SuppressLint
import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.util.Log


class MyHelper(var context: Context) : SQLiteOpenHelper(context,DB_NAME,null, DB_VERSION) {

    companion object {
        private val DB_NAME = "Media_Player"
        private val DB_VERSION = 1
        private val TABLE_NAME = "folder"
        private val ID = "id"
        private val FOLDER_NAME = "foldername"


    }

    override fun onCreate(p0: SQLiteDatabase?) {
        val CREATE_TABLE = "CREATE TABLE $TABLE_NAME($ID INTEGER PRIMARY KEY, $FOLDER_NAME TEXT );"
        p0?.execSQL(CREATE_TABLE)


    }

    override fun onUpgrade(p0: SQLiteDatabase?, p1: Int, p2: Int) {
        val DROP_TABLE = "DROP TABLE IF EXISTS $TABLE_NAME"
        p0?.execSQL(DROP_TABLE)
        onCreate(p0)

    }

    @SuppressLint("Range")
    fun getAllFolder(): ArrayList<Folder> {
        val folderlist = ArrayList<Folder>()
        val db = writableDatabase
        val selectQuery = "SELECT * FROM $TABLE_NAME"
        Log.d("tabless",selectQuery)
        val cursor = db.rawQuery(selectQuery, null)
        Log.d("tabless",cursor.toString())

        if (cursor != null) {
            if (cursor.moveToFirst()) {
                do {

                    val folders = Folder()

//                    folders.id=
//                        Integer.parseInt("1")
//                    folders.name = cursor.getString(cursor.getColumnIndexOrThrow(TABLE_NAME))
                      //  "FOLDER"
                   folders.id = Integer.parseInt(cursor.getString(cursor.getColumnIndexOrThrow(ID)))

                    folders.name = cursor.getString(cursor.getColumnIndexOrThrow(FOLDER_NAME))
//


                    folderlist.add(folders)
                } while (cursor.moveToNext())

            }
            Log.d( "CursorFolder",cursor.getCount().toString() );
        }
        cursor.close()
        return folderlist
    }

    //insert
    fun addFolder(folders : Folder):Boolean{
        val db = this.writableDatabase
        val values =  ContentValues()
        values.put(FOLDER_NAME,folders.name) //we can add details by this
        //dont have to add id into this because id is autogenerated

        val _success = db.insert(TABLE_NAME,null,values) //inserQuery
        db.close()
        return (Integer.parseInt("$_success")!=-1)

    }

    //select data of particular id
    @SuppressLint("Range")
    fun getFolder(_id: Int) : Folder{
        val folders = Folder()

        val db =  writableDatabase
//        Log.d("")
        val selectQuery = "SELECT *FROM $TABLE_NAME WHERE $ID = $_id"
       val cursor = db.rawQuery(selectQuery,null)
        Log.d( "Cursor(count)" , cursor.count.toString());

        cursor?.moveToFirst()
//      folders.id=
//            Integer.parseInt("1")
//        folders.name = cursor.getString(cursor.getColumnIndexOrThrow(TABLE_NAME))
           // "FOLDER"

         folders.id = Integer.parseInt(cursor.getString(cursor.getColumnIndexOrThrow(ID)))
        Log.d( "CursorId(0)",folders.id.toString());
        folders.name = cursor.getString(cursor.getColumnIndexOrThrow(FOLDER_NAME))
        Log.d( "Cursor(count)" , cursor.getCount().toString());
        Log.d( "Cursor(select)" , _id.toString());
        //cursor?.moveToNext()
        cursor.close()
        return folders
    }

    fun deleteFolder(id: Int):Boolean{
        val db= this.writableDatabase
        val _success = db.delete(TABLE_NAME, ID + "=?", arrayOf(id.toString())).toLong()
        Log.d( "ID" ,ID);
        db.close()
        return Integer.parseInt("$_success")!=-1


    }

    fun updateFolder(folders: Folder):Boolean{
        val db= this.writableDatabase
        val values = ContentValues()
        values.put(FOLDER_NAME,folders.name)
        val _success = db.update(TABLE_NAME,values, ID+ "=?", arrayOf(folders.id.toString()))

        Log.d( "IDupdate", folders.name);
        db.close()
        return (Integer.parseInt("$_success")!=-1)
    }
}